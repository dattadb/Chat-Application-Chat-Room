name: Spring Boot CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # 1. Checkout code
    - name: Checkout code
      uses: actions/checkout@v3

    # 2. Set up Java (JDK 17)
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'

    # 3. Cache Maven dependencies
    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    # 4. Build with Maven
    - name: Build with Maven
      run: mvn clean install -DskipTests

    # 5. Run Tests
    - name: Run Tests
      run: mvn test

    # 6. Package JAR
    - name: Package Artifact
      run: mkdir -p build && cp target/*.jar build/

    # 7. Upload build artifact (updated v4)
    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: spring-boot-app
        path: build/*.jar

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
    # 1. Download artifact (updated v4)
    - name: Download Artifact
      uses: actions/download-artifact@v4
      with:
        name: spring-boot-app
        path: build

    # 2. Deploy to Server (example)
    - name: Deploy to Server
      run: |
        echo "Deploying Spring Boot app..."
        # scp/ssh deployment commands here
        # Example:
        # echo "${{ secrets.SSH_PRIVATE_KEY }}" > private_key.pem
        # chmod 600 private_key.pem
        # scp -i private_key.pem build/*.jar ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/home/app/
        # ssh -i private_key.pem ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "nohup java -jar /home/app/your-app.jar &"
